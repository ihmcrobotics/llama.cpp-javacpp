// Targeted by JavaCPP version 1.5.11: DO NOT EDIT THIS FILE

package us.ihmc.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.llamacpp.global.llamacpp.*;


    // all the device properties
    @Properties(inherit = us.ihmc.llamacpp.LlamaCPPConfig.class)
public class ggml_backend_dev_props extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ggml_backend_dev_props() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ggml_backend_dev_props(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ggml_backend_dev_props(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ggml_backend_dev_props position(long position) {
            return (ggml_backend_dev_props)super.position(position);
        }
        @Override public ggml_backend_dev_props getPointer(long i) {
            return new ggml_backend_dev_props((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("const char*") BytePointer name(); public native ggml_backend_dev_props name(BytePointer setter);
        public native @Cast("const char*") BytePointer description(); public native ggml_backend_dev_props description(BytePointer setter);
        public native @Cast("size_t") long memory_free(); public native ggml_backend_dev_props memory_free(long setter);
        public native @Cast("size_t") long memory_total(); public native ggml_backend_dev_props memory_total(long setter);
        public native @ByRef ggml_backend_dev_caps caps(); public native ggml_backend_dev_props caps(ggml_backend_dev_caps setter);
    }
